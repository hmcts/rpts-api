SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- Create temporary tables for the CSV data
CREATE TEMPORARY TABLE nspl_temp(
    pcd VARCHAR (9) NOT NULL,
    pcd2 VARCHAR (9) NOT NULL,
    pcds VARCHAR (9) NOT NULL,
    dointr INTEGER NOT NULL,
    doterm VARCHAR (6) DEFAULT 0,
    usertype INTEGER NOT NULL,
    oseast1m VARCHAR (6) DEFAULT 0 NOT NULL,
    osnrth1m VARCHAR (7) DEFAULT 0 NOT NULL,
    osgrdind INTEGER NOT NULL,
    oa11 VARCHAR (10) NOT NULL,
    cty VARCHAR (9) NOT NULL,
    ced VARCHAR (9) NOT NULL,
    laua VARCHAR (9) NOT NULL,
    ward VARCHAR (9) NOT NULL,
    hlthau VARCHAR (9) NOT NULL,
    nhser VARCHAR (9) NOT NULL,
    ctry VARCHAR (9) NOT NULL,
    rgn VARCHAR (9) NOT NULL,
    pcon VARCHAR (9) NOT NULL,
    eer VARCHAR (9) NOT NULL,
    teclec VARCHAR (9) NOT NULL,
    ttwa VARCHAR (9) NOT NULL,
    pct VARCHAR (9) NOT NULL,
    itl VARCHAR (9) NOT NULL,
    park VARCHAR (9) NOT NULL,
    lsoa11 VARCHAR (9) NOT NULL,
    msoa11 VARCHAR (9) NOT NULL,
    wz11 VARCHAR (9) NOT NULL,
    ccg VARCHAR (9) NOT NULL,
    bua11 VARCHAR (9) NOT NULL,
    buasd11 VARCHAR (9) NOT NULL,
    ru11ind	VARCHAR (2) DEFAULT 0 NOT NULL,
    oac11 VARCHAR (3) NOT NULL,
    lat DOUBLE PRECISION,
    long DOUBLE PRECISION,
    lep1 VARCHAR (9) NOT NULL,
    lep2 VARCHAR (9) NOT NULL,
    pfa VARCHAR (9) NOT NULL,
    imd INTEGER NOT NULL,
    calncv VARCHAR (9) NOT NULL,
    stp VARCHAR (9) NOT NULL
);

CREATE TEMPORARY TABLE equivalents_temp(
    GEOGCD VARCHAR (9) NOT NULL,
    GEOGNM VARCHAR (100),
    GEOGNMW VARCHAR (50),
    GEOGCDO VARCHAR (50),
    GEOGNMO VARCHAR (100),
    GEOGCDD VARCHAR (6),
    GEOGNMD VARCHAR (50),
    GEOGCDH VARCHAR (10),
    GEOGNMH VARCHAR (100),
    GEOGCDS VARCHAR (10),
    GEOGNMS VARCHAR (100),
    GEOGCDI VARCHAR (10),
    GEOGNMI VARCHAR (10),
    GEOGCDWG VARCHAR (10),
    GEOGNMWG VARCHAR (50),
    GEOGNMWWG VARCHAR (50),
    OPER_DATE VARCHAR (20),
    TERM_DATE VARCHAR (20),
    ENTITYCD VARCHAR (10),
    YEAR VARCHAR(4),
    STATUS VARCHAR (10)
);

-- Create the table with the matching between the 9 char la code and the 4 char la code
-- (we are interested in the 4 char code, however it does not mean that all rows will be 4 chars long)
CREATE TABLE public.search_postcode_la(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    postcode VARCHAR(9) NOT NULL,
    nspl_la_code VARCHAR(9) NOT NULL,
    eq_la_code VARCHAR(9)
);

-- Copy the data to the temp tables
COPY nspl_temp(pcd,
    pcd2,
    pcds,
    dointr,
    doterm,
    usertype,
    oseast1m,
    osnrth1m,
    osgrdind,
    oa11,
    cty,
    ced,
    laua,
    ward,
    hlthau,
    nhser,
    ctry,
    rgn,
    pcon,
    eer,
    teclec,
    ttwa,
    pct,
    itl,
    park,
    lsoa11,
    msoa11,
    wz11,
    ccg,
    bua11,
    buasd11,
    ru11ind,
    oac11,
    lat,
    long,
    lep1,
    lep2,
    pfa,
    imd,
    calncv,
    stp) FROM '/Data/NSPL_AUG_2021_UK.csv' CSV HEADER DELIMITER ',';

COPY equivalents_temp(
    GEOGCD,
    GEOGNM,
    GEOGNMW,
    GEOGCDO,
    GEOGNMO,
    GEOGCDD,
    GEOGNMD,
    GEOGCDH,
    GEOGNMH,
    GEOGCDS,
    GEOGNMS,
    GEOGCDI,
    GEOGNMI,
    GEOGCDWG,
    GEOGNMWG,
    GEOGNMWWG,
    OPER_DATE,
    TERM_DATE,
    ENTITYCD,
    YEAR,
    STATUS) FROM '/Data/Equivalents.csv' CSV HEADER DELIMITER ',';

-- Create the table with the mapping
INSERT INTO public.search_postcode_la(postcode, nspl_la_code, eq_la_code)
SELECT pcd, laua, GEOGCDO
FROM nspl_temp
JOIN equivalents_temp
ON equivalents_temp.GEOGCD = nspl_temp.laua;
